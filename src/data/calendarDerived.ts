import { addDays, parseISO, setHours } from "date-fns";

import type { CalendarEvent, CalendarEventPriority, CalendarVisualCategory } from "@/types/calendar";

interface DerivedTask {
  id: string;
  title: string;
  dueDate: string;
  priority: CalendarEventPriority;
  projectId: string;
  calendarId: string;
  linkedItemId: string;
  ownerId: string;
  ownerName: string;
}

interface DerivedSprint {
  id: string;
  name: string;
  startDate: string;
  endDate: string;
  projectId: string;
  calendarId: string;
}

interface DerivedRelease {
  id: string;
  name: string;
  releaseDate: string;
  windowEndDate: string;
  projectId: string;
  calendarId: string;
}

interface DerivedVacation {
  id: string;
  ownerId: string;
  ownerName: string;
  startDate: string;
  endDate: string;
  calendarId: string;
}

const DERIVED_TASKS: DerivedTask[] = [
  {
    id: "task-derived-1",
    title: "Finalize QA checklist",
    dueDate: "2024-07-18",
    priority: "high",
    projectId: "apollo",
    calendarId: "calendar.project.apollo",
    linkedItemId: "task-qa-checklist",
    ownerId: "user-avery",
    ownerName: "Avery",
  },
  {
    id: "task-derived-2",
    title: "Draft release notes",
    dueDate: "2024-07-21",
    priority: "normal",
    projectId: "apollo",
    calendarId: "calendar.project.apollo",
    linkedItemId: "task-release-notes",
    ownerId: "user-morgan",
    ownerName: "Morgan",
  },
];

const DERIVED_SPRINTS: DerivedSprint[] = [
  {
    id: "sprint-derived-1",
    name: "Sprint 25",
    startDate: "2024-07-22",
    endDate: "2024-08-02",
    projectId: "apollo",
    calendarId: "calendar.project.apollo",
  },
];

const DERIVED_RELEASES: DerivedRelease[] = [
  {
    id: "release-derived-1",
    name: "Apollo 2.1",
    releaseDate: "2024-07-30",
    windowEndDate: "2024-08-03",
    projectId: "apollo",
    calendarId: "calendar.project.apollo",
  },
];

const DERIVED_VACATIONS: DerivedVacation[] = [
  {
    id: "vacation-derived-1",
    ownerId: "user-taylor",
    ownerName: "Taylor",
    startDate: "2024-07-26",
    endDate: "2024-07-29",
    calendarId: "calendar.personal",
  },
];

function buildTaskEvent(task: DerivedTask): CalendarEvent {
  const start = setHours(parseISO(`${task.dueDate}T00:00:00Z`), 15);
  const end = addDays(start, 0);
  return {
    id: `derived-event-task-${task.id}`,
    calendarId: task.calendarId,
    projectId: task.projectId,
    title: task.title,
    description: "Automatically scheduled from task due date.",
    start: start.toISOString(),
    end: addDays(start, 0).toISOString(),
    allDay: false,
    priority: task.priority,
    type: "task",
    status: "busy",
    derivedFrom: [{ id: task.linkedItemId, type: "task", label: task.title }],
    ownerId: task.ownerId,
    ownerName: task.ownerName,
    labels: ["auto-generated", "deadline"],
    hasReminders: true,
    reminders: [{ id: `rem-derived-${task.id}`, method: "email", offsetMinutes: 60 * 24 }],
    isDeadline: true,
    metadata: {
      autoGenerated: true,
      source: "task",
    },
  } satisfies CalendarEvent;
}

function buildSprintEvents(sprint: DerivedSprint): CalendarEvent[] {
  const start = parseISO(`${sprint.startDate}T09:00:00Z`);
  const end = parseISO(`${sprint.endDate}T17:00:00Z`);
  const kickoff: CalendarEvent = {
    id: `derived-event-sprint-start-${sprint.id}`,
    calendarId: sprint.calendarId,
    projectId: sprint.projectId,
    title: `${sprint.name} kickoff`,
    start: start.toISOString(),
    end: addDays(start, 0).toISOString(),
    status: "confirmed",
    type: "sprint",
    priority: "normal",
    derivedFrom: [{ id: sprint.id, type: "sprint", label: sprint.name }],
    labels: ["auto-generated", "sprint"],
    metadata: { autoGenerated: true, source: "sprint", autoAdjustDependencies: true },
  };

  const review: CalendarEvent = {
    id: `derived-event-sprint-end-${sprint.id}`,
    calendarId: sprint.calendarId,
    projectId: sprint.projectId,
    title: `${sprint.name} review`,
    start: end.toISOString(),
    end: end.toISOString(),
    status: "confirmed",
    type: "sprint",
    priority: "high",
    derivedFrom: [{ id: sprint.id, type: "sprint", label: sprint.name }],
    labels: ["auto-generated", "sprint"],
    metadata: { autoGenerated: true, source: "sprint", autoAdjustDependencies: true },
  };

  return [kickoff, review];
}

function buildReleaseEvents(release: DerivedRelease): CalendarEvent[] {
  const releaseStart = parseISO(`${release.releaseDate}T08:00:00Z`);
  const releaseEnd = parseISO(`${release.windowEndDate}T18:00:00Z`);
  const milestone: CalendarEvent = {
    id: `derived-event-release-milestone-${release.id}`,
    calendarId: release.calendarId,
    projectId: release.projectId,
    title: `${release.name} launch`,
    start: releaseStart.toISOString(),
    end: releaseStart.toISOString(),
    status: "milestone",
    type: "release",
    priority: "critical",
    derivedFrom: [{ id: release.id, type: "release", label: release.name }],
    labels: ["auto-generated", "release"],
    isReleaseWindow: true,
    isDeadline: true,
    metadata: { autoGenerated: true, source: "release" },
  };

  const windowBand: CalendarEvent = {
    id: `derived-event-release-window-${release.id}`,
    calendarId: release.calendarId,
    projectId: release.projectId,
    title: `${release.name} rollout window`,
    start: releaseStart.toISOString(),
    end: releaseEnd.toISOString(),
    status: "confirmed",
    type: "release",
    priority: "high",
    derivedFrom: [{ id: release.id, type: "release", label: release.name }],
    labels: ["auto-generated", "release-window"],
    isReleaseWindow: true,
    allDay: false,
    metadata: { autoGenerated: true, source: "release", visualCategory: "release" satisfies CalendarVisualCategory },
  };

  return [milestone, windowBand];
}

function buildVacationEvent(vacation: DerivedVacation): CalendarEvent {
  const start = parseISO(`${vacation.startDate}T00:00:00Z`);
  const end = parseISO(`${vacation.endDate}T23:59:59Z`);
  return {
    id: `derived-event-vacation-${vacation.id}`,
    calendarId: vacation.calendarId,
    projectId: "personal",
    title: `${vacation.ownerName} OOO`,
    start: start.toISOString(),
    end: end.toISOString(),
    allDay: true,
    status: "busy",
    type: "availability",
    priority: "low",
    derivedFrom: [{ id: vacation.id, type: "vacation", label: `${vacation.ownerName} vacation` }],
    labels: ["auto-generated", "ooo"],
    workingHoursImpact: "holiday",
    metadata: { autoGenerated: true, source: "vacation", autoDecline: true },
  } satisfies CalendarEvent;
}

export function generateDerivedEvents(range: { from: Date; to: Date }): CalendarEvent[] {
  const events: CalendarEvent[] = [];

  DERIVED_TASKS.forEach((task) => {
    const event = buildTaskEvent(task);
    if (parseISO(event.start) >= range.from && parseISO(event.start) <= range.to) {
      events.push(event);
    }
  });

  DERIVED_SPRINTS.forEach((sprint) => {
    buildSprintEvents(sprint).forEach((event) => {
      const eventStart = parseISO(event.start);
      if (eventStart >= range.from && eventStart <= range.to) {
        events.push(event);
      }
    });
  });

  DERIVED_RELEASES.forEach((release) => {
    buildReleaseEvents(release).forEach((event) => {
      const eventStart = parseISO(event.start);
      const eventEnd = parseISO(event.end);
      if (eventEnd >= range.from && eventStart <= range.to) {
        events.push(event);
      }
    });
  });

  DERIVED_VACATIONS.forEach((vacation) => {
    const event = buildVacationEvent(vacation);
    const eventStart = parseISO(event.start);
    const eventEnd = parseISO(event.end);
    if (eventEnd >= range.from && eventStart <= range.to) {
      events.push(event);
    }
  });

  return events;
}
